/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ./globaltagging.go
//
// Generated by this command:
//
//	mockgen -source=./globaltagging.go -destination=./mock/globaltagging_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	core "github.com/IBM/go-sdk-core/v5/core"
	globaltaggingv1 "github.com/IBM/platform-services-go-sdk/globaltaggingv1"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobalTagging is a mock of GlobalTagging interface.
type MockGlobalTagging struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalTaggingMockRecorder
	isgomock struct{}
}

// MockGlobalTaggingMockRecorder is the mock recorder for MockGlobalTagging.
type MockGlobalTaggingMockRecorder struct {
	mock *MockGlobalTagging
}

// NewMockGlobalTagging creates a new mock instance.
func NewMockGlobalTagging(ctrl *gomock.Controller) *MockGlobalTagging {
	mock := &MockGlobalTagging{ctrl: ctrl}
	mock.recorder = &MockGlobalTaggingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalTagging) EXPECT() *MockGlobalTaggingMockRecorder {
	return m.recorder
}

// AttachTag mocks base method.
func (m *MockGlobalTagging) AttachTag(arg0 *globaltaggingv1.AttachTagOptions) (*globaltaggingv1.TagResults, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTag", arg0)
	ret0, _ := ret[0].(*globaltaggingv1.TagResults)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AttachTag indicates an expected call of AttachTag.
func (mr *MockGlobalTaggingMockRecorder) AttachTag(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTag", reflect.TypeOf((*MockGlobalTagging)(nil).AttachTag), arg0)
}

// CreateTag mocks base method.
func (m *MockGlobalTagging) CreateTag(arg0 *globaltaggingv1.CreateTagOptions) (*globaltaggingv1.CreateTagResults, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0)
	ret0, _ := ret[0].(*globaltaggingv1.CreateTagResults)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockGlobalTaggingMockRecorder) CreateTag(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGlobalTagging)(nil).CreateTag), arg0)
}

// GetTagByName mocks base method.
func (m *MockGlobalTagging) GetTagByName(arg0 string) (*globaltaggingv1.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", arg0)
	ret0, _ := ret[0].(*globaltaggingv1.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockGlobalTaggingMockRecorder) GetTagByName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockGlobalTagging)(nil).GetTagByName), arg0)
}
