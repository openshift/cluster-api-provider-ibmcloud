/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ./transitgateway.go
//
// Generated by this command:
//
//	mockgen -source=./transitgateway.go -destination=./mock/transitgateway_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	core "github.com/IBM/go-sdk-core/v5/core"
	transitgatewayapisv1 "github.com/IBM/networking-go-sdk/transitgatewayapisv1"
	gomock "go.uber.org/mock/gomock"
)

// MockTransitGateway is a mock of TransitGateway interface.
type MockTransitGateway struct {
	ctrl     *gomock.Controller
	recorder *MockTransitGatewayMockRecorder
	isgomock struct{}
}

// MockTransitGatewayMockRecorder is the mock recorder for MockTransitGateway.
type MockTransitGatewayMockRecorder struct {
	mock *MockTransitGateway
}

// NewMockTransitGateway creates a new mock instance.
func NewMockTransitGateway(ctrl *gomock.Controller) *MockTransitGateway {
	mock := &MockTransitGateway{ctrl: ctrl}
	mock.recorder = &MockTransitGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransitGateway) EXPECT() *MockTransitGatewayMockRecorder {
	return m.recorder
}

// CreateTransitGateway mocks base method.
func (m *MockTransitGateway) CreateTransitGateway(arg0 *transitgatewayapisv1.CreateTransitGatewayOptions) (*transitgatewayapisv1.TransitGateway, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransitGateway", arg0)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGateway)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTransitGateway indicates an expected call of CreateTransitGateway.
func (mr *MockTransitGatewayMockRecorder) CreateTransitGateway(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransitGateway", reflect.TypeOf((*MockTransitGateway)(nil).CreateTransitGateway), arg0)
}

// CreateTransitGatewayConnection mocks base method.
func (m *MockTransitGateway) CreateTransitGatewayConnection(arg0 *transitgatewayapisv1.CreateTransitGatewayConnectionOptions) (*transitgatewayapisv1.TransitGatewayConnectionCust, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransitGatewayConnection", arg0)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGatewayConnectionCust)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTransitGatewayConnection indicates an expected call of CreateTransitGatewayConnection.
func (mr *MockTransitGatewayMockRecorder) CreateTransitGatewayConnection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransitGatewayConnection", reflect.TypeOf((*MockTransitGateway)(nil).CreateTransitGatewayConnection), arg0)
}

// DeleteTransitGateway mocks base method.
func (m *MockTransitGateway) DeleteTransitGateway(deleteTransitGatewayOptions *transitgatewayapisv1.DeleteTransitGatewayOptions) (*core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransitGateway", deleteTransitGatewayOptions)
	ret0, _ := ret[0].(*core.DetailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransitGateway indicates an expected call of DeleteTransitGateway.
func (mr *MockTransitGatewayMockRecorder) DeleteTransitGateway(deleteTransitGatewayOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransitGateway", reflect.TypeOf((*MockTransitGateway)(nil).DeleteTransitGateway), deleteTransitGatewayOptions)
}

// DeleteTransitGatewayConnection mocks base method.
func (m *MockTransitGateway) DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptions *transitgatewayapisv1.DeleteTransitGatewayConnectionOptions) (*core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransitGatewayConnection", deleteTransitGatewayConnectionOptions)
	ret0, _ := ret[0].(*core.DetailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransitGatewayConnection indicates an expected call of DeleteTransitGatewayConnection.
func (mr *MockTransitGatewayMockRecorder) DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransitGatewayConnection", reflect.TypeOf((*MockTransitGateway)(nil).DeleteTransitGatewayConnection), deleteTransitGatewayConnectionOptions)
}

// GetTransitGateway mocks base method.
func (m *MockTransitGateway) GetTransitGateway(arg0 *transitgatewayapisv1.GetTransitGatewayOptions) (*transitgatewayapisv1.TransitGateway, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGateway", arg0)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGateway)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransitGateway indicates an expected call of GetTransitGateway.
func (mr *MockTransitGatewayMockRecorder) GetTransitGateway(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGateway", reflect.TypeOf((*MockTransitGateway)(nil).GetTransitGateway), arg0)
}

// GetTransitGatewayByName mocks base method.
func (m *MockTransitGateway) GetTransitGatewayByName(name string) (*transitgatewayapisv1.TransitGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayByName", name)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayByName indicates an expected call of GetTransitGatewayByName.
func (mr *MockTransitGatewayMockRecorder) GetTransitGatewayByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayByName", reflect.TypeOf((*MockTransitGateway)(nil).GetTransitGatewayByName), name)
}

// GetTransitGatewayConnection mocks base method.
func (m *MockTransitGateway) GetTransitGatewayConnection(arg0 *transitgatewayapisv1.GetTransitGatewayConnectionOptions) (*transitgatewayapisv1.TransitGatewayConnectionCust, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayConnection", arg0)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGatewayConnectionCust)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransitGatewayConnection indicates an expected call of GetTransitGatewayConnection.
func (mr *MockTransitGatewayMockRecorder) GetTransitGatewayConnection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnection", reflect.TypeOf((*MockTransitGateway)(nil).GetTransitGatewayConnection), arg0)
}

// ListTransitGatewayConnections mocks base method.
func (m *MockTransitGateway) ListTransitGatewayConnections(arg0 *transitgatewayapisv1.ListTransitGatewayConnectionsOptions) (*transitgatewayapisv1.TransitGatewayConnectionCollection, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransitGatewayConnections", arg0)
	ret0, _ := ret[0].(*transitgatewayapisv1.TransitGatewayConnectionCollection)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransitGatewayConnections indicates an expected call of ListTransitGatewayConnections.
func (mr *MockTransitGatewayMockRecorder) ListTransitGatewayConnections(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransitGatewayConnections", reflect.TypeOf((*MockTransitGateway)(nil).ListTransitGatewayConnections), arg0)
}
